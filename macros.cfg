
#####################################################################
#   Macros
#####################################################################

[gcode_macro G32]
description: Home and QGL
gcode:
    BED_MESH_CLEAR
    G28
    #QUAD_GANTRY_LEVEL
    #G28
    G0 X125 Y125 Z30 F3600

[gcode_macro FC]
description: Move z up and head to front and center
gcode:
    G91
    G0 Z5 F12000
    G90
    G0 X125 Y10 F12000

[gcode_macro BC]
description: Move z up and head to back and center
gcode:
    G91
    G0 Z5 F12000
    G90
    G0 X125 Y240 F12000

[gcode_macro Center_Z5]
description: Move z up and head to back and center
gcode:
    G90
    G0 X125 Y125 Z5 F12000

[gcode_macro Go_0]
description: Move z up and go to 0,0
gcode:
    G91
    G0 Z5 F12000
    G90
    G0 X0 Y0 F12000

[gcode_macro MOTORS_OFF]
description: Turns all motors off
gcode:
  M18
   
[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:
    CASE_RANDOM
    G32                            ; home all axes
    G1 Z20 F3000                   ; move nozzle away from bed

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    RESETRGB
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-4.0 F3600                 ; retract filament
    G91                            ; relative positioning
    G0 Z1.00 X20.0 Y20.0 F20000    ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G1 Z2 F3000                    ; move nozzle up 2mm
    G90                            ; absolute positioning
    G0  X125 Y250 F3600            ; park nozzle at rear
    BED_MESH_CLEAR


###################################################################################################
# Adapted from https://github.com/AndrewEllis93/v2.247_backup_klipper_config/blob/master/macros.cfg
###################################################################################################

######################### LCD RGB CONTROLS #########################

# Set LCD RGB at startup
[delayed_gcode setdisplayneopixel]
initial_duration: 1
gcode:
    RESETRGB

##  Set RGB values on boot up for each Neopixel. 
##  Index 1 = display, Index 2 and 3 = Knob (not correct for my voronpi 2.4)
##  Index 3 = display, Index 1 and 2 = Knob

[gcode_macro RESETRGB]
description: Default RGB
gcode:
    SET_LED LED=btt_mini12864 RED=1 GREEN=0.45 BLUE=0.4 INDEX=1 TRANSMIT=0
    SET_LED LED=btt_mini12864 RED=0.25 GREEN=0.2 BLUE=0.15 INDEX=2 TRANSMIT=0
    SET_LED LED=btt_mini12864 RED=0.25 GREEN=0.2 BLUE=0.15 INDEX=3
    CASE R=0.2 G=0.2 B=0.2

[gcode_macro LCDRGB]
description: Example LCDRGB R=1 G=0 B=0
gcode:
    {% set R = params.R|default(1)|float %}
    {% set G = params.G|default(1)|float %}
    {% set B = params.B|default(1)|float %}

    SET_LED LED=btt_mini12864 RED={R} GREEN={G} BLUE={B} INDEX=1 TRANSMIT=0
    SET_LED LED=btt_mini12864 RED={R} GREEN={G} BLUE={B} INDEX=2 TRANSMIT=0
    SET_LED LED=btt_mini12864 RED={R} GREEN={G} BLUE={B} INDEX=3 TRANSMIT=1

[gcode_macro CASE]
description: Example CASE R=1 G=0 B=0
gcode:
    {% set R = params.R|default(1)|float %}
    {% set G = params.G|default(1)|float %}
    {% set B = params.B|default(1)|float %}

    SET_LED LED=strip RED={R} GREEN={G} BLUE={B} TRANSMIT=1

[gcode_macro CASE_OFF]
description: Case lights off
gcode:
    CASE R=0 G=0 B=0

[gcode_macro FADE_RED]
description: Flash case reds and leave them red
variable_case_red: 0.0
variable_case_red_count: 5
gcode:
    SET_GCODE_VARIABLE MACRO=FADE_RED VARIABLE=case_red VALUE=0
    SET_GCODE_VARIABLE MACRO=FADE_RED VARIABLE=case_red_count VALUE=5
    UPDATE_DELAYED_GCODE ID=_RUN_FADE_RED DURATION=0.1

[delayed_gcode _RUN_FADE_RED]
gcode:
    {% set case_red = printer["gcode_macro FADE_RED"].case_red %}
    {% set case_red_count = printer["gcode_macro FADE_RED"].case_red_count %}
    
    CASE R={case_red} G=0 B=0
    SET_GCODE_VARIABLE MACRO=FADE_RED VARIABLE=case_red VALUE={case_red + 0.1}
    {% if case_red < 1.0 %}
        UPDATE_DELAYED_GCODE ID=_RUN_FADE_RED DURATION=0.05
    {% elif case_red_count > 0 %}
        SET_GCODE_VARIABLE MACRO=FADE_RED VARIABLE=case_red VALUE=0
        SET_GCODE_VARIABLE MACRO=FADE_RED VARIABLE=case_red_count VALUE={case_red_count - 1}
        UPDATE_DELAYED_GCODE ID=_RUN_FADE_RED DURATION=0.05
    {% else %}
        UPDATE_DELAYED_GCODE ID=_RUN_FADE_RED DURATION=0
    {% endif %}

[gcode_macro CASE_RANDOM]
gcode:
    {% for led in range(76|int) %}
        SET_LED LED=strip RED={(range(0,100) | random) / 100} GREEN={(range(0,100) | random) / 100} BLUE={(range(0,100) | random) / 100} INDEX={led+1} TRANSMIT=1
        G4 P15
    {% endfor %}

[gcode_macro CASE_BACK_RED]
gcode:
    {% for led in range(19|int) %}
        SET_LED LED=strip RED=0.5 GREEN=0 BLUE=0 INDEX={led+1} TRANSMIT={1 if led == 18 else 0}
        G4 P15
    {% endfor %}

######################### CONFIG BACKUP #########################
# https://github.com/th33xitus/kiauh/wiki/How-to-autocommit-config-changes-to-github%3F
# modified gitbackup to use access token

[gcode_shell_command backup_cfg]
command: /home/pi/klipper_config/gitbackup.sh
timeout: 30.
verbose: True

[gcode_macro BACKUP_CFG]
gcode:
    RUN_SHELL_COMMAND CMD=backup_cfg
    
######################### TESTING #########################
[gcode_shell_command process_res]
command: /home/pi/klipper_config/process_res.sh
timeout: 180.
verbose: True

[gcode_macro TEST_ALL_RESONANCES]
description: Perform X, Y, A, B resonance tests, takes a while of course
gcode:
    TEST_RESONANCES AXIS=X
    TEST_RESONANCES AXIS=Y
    TEST_RESONANCES AXIS=1,1 OUTPUT=raw_data
    TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data
    RUN_SHELL_COMMAND CMD=process_res
    
[gcode_macro DUMP_PARAMETERS]
description: Dump all Klipper parameters to terminal, helps find names and values of variables for use in macros
gcode:
  {% set parameters = namespace(output = '') %}
  {% for name1 in printer %}
    {% for name2 in printer[name1] %}
      {% set donotwant = ['bed_mesh','configfile'] %}
      {% if name1 is not in donotwant %}
        {% set param = "printer['%s'].%s = %s" % (name1, name2, printer[name1][name2]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
      {% endif %}
      {% else %}
        {% set param = "printer['%s'] = %s" % (name1, printer[name1]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
    {% endfor %}
  {% endfor %}
  {action_respond_info(parameters.output)}

[gcode_macro SPEEDTEST]
description: Home, get position, throw around toolhead, home again. If XY steps are greater than XY microsteps different (a full step - usually just endstop variance), then we likely skipped
gcode:
    # Parameters
    {% set i = params.I|default(1)|int %}
    
    SAVE_GCODE_STATE NAME=SPEEDTEST
    G28 X Y
    GET_POSITION
    G90                              ; absolute positioning
    {% for iteration in range(i|int) %}
        G1 X10 Y10 F99999
        G1 X{printer.toolhead.axis_maximum.x-10} Y{printer.toolhead.axis_maximum.y-10} F99999
        G1 X10 Y10 F99999
        G1 X{printer.toolhead.axis_maximum.x-10} Y{printer.toolhead.axis_maximum.y-10} F99999

        G1 X20 Y{printer.toolhead.axis_maximum.y-10} F99999

        G1 X{printer.toolhead.axis_maximum.x-10} Y10 F99999
        G1 X10 Y{printer.toolhead.axis_maximum.y-10} F99999
        G1 X{printer.toolhead.axis_maximum.x-10} Y10 F99999
        G1 X10 Y{printer.toolhead.axis_maximum.y-10} F99999

        G1 X10 Y10 F99999
        G1 X{printer.toolhead.axis_maximum.x-10} Y10 F99999
        G1 X{printer.toolhead.axis_maximum.x-10} Y{printer.toolhead.axis_maximum.y-10} F99999
        G1 X10 Y{printer.toolhead.axis_maximum.y-10} F99999
        G1 X10 Y10 F99999
    {% endfor %}
    G28 X Y
    GET_POSITION
    RESTORE_GCODE_STATE NAME=SPEEDTEST

